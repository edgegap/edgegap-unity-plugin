using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Newtonsoft.Json;
using Unity.Netcode.Transports.UTP;
using UnityEngine;
using UnityEngine.SceneManagement;
#if UNITY_EDITOR
using UnityEditor;
using UnityEditor.SceneManagement;
using Edgegap.Editor;
#endif

namespace Edgegap.Bootstrap
{
    public class #SCRIPTNAME# : EdgegapServerBootstrap
    {
        private (string Host, ushort InternalPort, string Protocol) _sceneTransportData;

        protected override void ValidatePortMapping()
        {
            UnityTransport transport = FindFirstObjectByType<UnityTransport>();
            _sceneTransportData = (
                transport.ConnectionData.Address,
                transport.ConnectionData.Port,
                "UDP"
            );

            if (_sceneTransportData.Host != "localhost" && _sceneTransportData.Host != "0.0.0.0")
            {
                Debug.LogWarning(
                    $"WARNING: Expecting network address `localhost` but got `{_sceneTransportData.Host}` in UnityTransport. "
                        + "Change your network address in UnityTransport."
                );
            }

            if (_arbitriumPortsMapping.ports.Count == 0)
            {
                Debug.LogWarning(
                    $"WARNING: Expecting at least 1 Edgegap Port Mapping entry. Add port mapping in your app version. {APP_VERSION_PAGE}"
                );
                return;
            }

            // @todo the rest

            string portsMappingMatchKey = null;

            foreach (
                KeyValuePair<string, PortMappingData> portMapEntry in _arbitriumPortsMapping.ports
            )
            {
                if (portMapEntry.Value.name == "UnityTransport")
                {
                    portsMappingMatchKey = portMapEntry.Key;
                    break;
                }
            }

            if (portsMappingMatchKey is null)
            {
                Debug.LogWarning(
                    $"WARNING: No port mapping entry matches the name of \"UnityTransport.\"\n"
                        + $"Make sure to update your app version to include an entry named \"UnityTransport\".\n{APP_VERSION_PAGE}"
                );
            }
            else
            {
                PortMappingData portMap = _arbitriumPortsMapping.ports[portsMappingMatchKey];

                if (portMap.internalPort != _sceneTransportData.InternalPort)
                {
                    Debug.LogWarning(
                        $"WARNING: The internal port values of the app version and the Unity Transport do not match.\n"
                            + $"Make sure to update your port mapping on your app version's page.\n{APP_VERSION_PAGE}"
                    );
                }

                if (portMap.protocol != _sceneTransportData.Protocol)
                {
                    Debug.LogWarning(
                        $"WARNING: The wrong protocol has been selected in your app version's port mapping. "
                            + $"The Unity Transport uses the {_sceneTransportData.Protocol} protocol.\n"
                            + $"Make sure to update your port mapping on your app version's page.\n{APP_VERSION_PAGE}"
                    );
                }
            }
        }
    }
}
